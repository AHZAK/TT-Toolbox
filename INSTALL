1 Setting path
	Use the script setup.m in this directory.
	It will add all subfolders to the MATLAB path automatically.


2. Compiling the MEX libraries
	In order to accelerate some slow MATLAB routines (like gmres),
	the TT-Toolbox contains their alternatives in C and FORTRAN, located in fmex/.
	Moreover, the tt_read/tt_write modules allow to read/save a tt_tensor from/to the special SVD file.
	If you have a Linux/Mac OS machine, you probably don't need to recompile the binaries already included.
	In addition, all algorithms (eg. als_adapt_solve) can be parametrized to use the MATLAB codes only
	(see help of a certain routine, if it claims on absent/bad MEX module).

	However, on some other architectures, and if you would like to use your own compiler/LAPACK/etc,
	proceed as follows.
	As soon as you have just cloned/downloaded the TT-Toolbox, fmex/ contains an empty directory tt-fort/.
	This is for our another repository https://github.com/oseledets/tt-fort, containing some FORTRAN and C
	codes for TT algebra, etc.
	Please clone or download it.
	Now, create new files named Makefile.cpu in both fmex/ and fmex/tt-fort/.
	These files should contain one line:
		CPU = your_cpu_alias
	where "your_cpu_alias" shall be one of possible variants from Makefile.in 
	### Important ###
	1) There are separate Makefile.in and Makefile.cpu in fmex/ and fmex/tt-fort
	2) In fmex/tt-fort, you must choose a preset with 8-byte integers: i8-gnu or i8-intel 
	################
	You may take any of our presets (eg. "default", "default-x64") given in Makefile.in,
	or write your own, naming the variables (CC, COPT and so on) similarly to the existing aliases. 
	After that, run make in fmex/.
	The library mytt.a will be built in tt-fort/ automatically, followed by the MEX files in fmex/.
